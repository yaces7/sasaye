rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Yardımcı fonksiyonlar
    function isAuthenticated() {
      return request.auth != null;
    }

    function isEmailVerified() {
      return request.auth.token.email_verified;
    }

    // Rate limiting kontrolü - düzeltilmiş versiyon
    function notSpamming(path) {
      let recentRequests = get(/databases/$(database)/documents/rateLimits/$(request.auth.uid)).data.requests[path];
      return recentRequests == null || recentRequests < 30;
    }

    // Kullanıcı koleksiyonu kuralları
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Sohbet koleksiyonu kuralları
    match /chats/{chatId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
    }

    // Mesaj koleksiyonu kuralları
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
        exists(/databases/$(database)/documents/chats/$(resource.data.chatId)) &&
        request.auth.uid in get(/databases/$(database)/documents/chats/$(resource.data.chatId)).data.participants;
      allow create: if isAuthenticated();
    }

    // Bildirim koleksiyonu kuralları
    match /notifications/{notificationId} {
      allow create: if isAuthenticated();
      allow read, delete: if isAuthenticated() && 
                         resource.data.userId == request.auth.uid;
    }

    // Rate limiting için sayaç koleksiyonu
    match /rateLimits/{userId} {
      allow read, write: if request.auth.uid == userId;
      
      // Rate limit verilerini sıfırlama
      allow update: if request.auth.uid == userId &&
                   request.resource.data.requests[request.resource.data.path] == 0;
    }
  }
}
