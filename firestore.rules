rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Yardımcı fonksiyonlar
    function isAuthenticated() {
      return request.auth != null;
    }

    function isEmailVerified() {
      return request.auth.token.email_verified;
    }

    function isGroupMember(groupId) {
      let group = get(/databases/$(database)/documents/groups/$(groupId));
      return request.auth.uid in group.data.members;
    }

    function isGroupOwner(groupId) {
      let group = get(/databases/$(database)/documents/groups/$(groupId));
      return request.auth.uid == group.data.ownerId;
    }

    function isChatParticipant(chatId) {
      let chat = get(/databases/$(database)/documents/chats/$(chatId));
      return request.auth.uid in chat.data.participants;
    }

    // Kullanıcı koleksiyonu kuralları
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Sohbet koleksiyonu kuralları
    match /chats/{chatId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow delete: if false; // Sohbetler silinemez

      match /messages/{messageId} {
        allow read: if isAuthenticated() && isChatParticipant(chatId);
        allow create: if isAuthenticated() && isChatParticipant(chatId);
        allow update: if isAuthenticated() && request.auth.uid == resource.data.senderId;
        allow delete: if isAuthenticated() && request.auth.uid == resource.data.senderId;
      }
    }

    // Grup koleksiyonu kuralları
    match /groups/{groupId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isGroupOwner(groupId) || isGroupMember(groupId));
      allow delete: if isAuthenticated() && isGroupOwner(groupId);

      match /members/{memberId} {
        allow read: if isAuthenticated() && isGroupMember(groupId);
        allow create: if isAuthenticated() && isGroupOwner(groupId);
        allow update: if isAuthenticated() && isGroupOwner(groupId);
        allow delete: if isAuthenticated() && (isGroupOwner(groupId) || request.auth.uid == memberId);
      }

      match /messages/{messageId} {
        allow read: if isAuthenticated() && isGroupMember(groupId);
        allow create: if isAuthenticated() && isGroupMember(groupId);
        allow update: if isAuthenticated() && request.auth.uid == resource.data.senderId;
        allow delete: if isAuthenticated() && (isGroupOwner(groupId) || request.auth.uid == resource.data.senderId);
      }
    }

    // Bildirim koleksiyonu kuralları
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if false; // Bildirimler güncellenemez
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Video koleksiyonu kuralları
    match /videos/{videoId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;

      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;
        allow delete: if isAuthenticated() && (
          request.auth.uid == resource.data.userId || 
          request.auth.uid == get(/databases/$(database)/documents/videos/$(videoId)).data.userId
        );
      }

      match /likes/{likeId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
      }
    }

    // Kullanıcı ayarları koleksiyonu
    match /userSettings/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }
  }
}
