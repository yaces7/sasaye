rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Yardımcı fonksiyonlar
    function isAuthenticated() {
      return request.auth != null;
    }

    function isEmailVerified() {
      return request.auth.token.email_verified;
    }

    // Rate limiting kontrolü
    function notSpamming(path) {
      let recentRequests = get(/databases/$(database)/documents/rateLimits/$(request.auth.uid)).data.requests[path];
      return recentRequests == null || recentRequests < 30;
    }

    // Kullanıcı koleksiyonu kuralları
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Sohbet koleksiyonu kuralları
    match /chats/{chatId} {
      // Sohbet dokümanına erişim
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() &&
        request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;

      // Alt koleksiyonlar için kurallar
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
          request.auth.uid == request.resource.data.senderId &&
          notSpamming('messages');
        allow update: if isAuthenticated() &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
          (!request.resource.data.diff(resource.data).affectedKeys()
            .hasAny(['senderId', 'timestamp', 'text']));
      }
    }

    // Bildirim koleksiyonu kuralları
    match /notifications/{notificationId} {
      allow create: if isAuthenticated();
      allow read, delete: if isAuthenticated() && 
                         resource.data.userId == request.auth.uid;
    }

    // Rate limiting için sayaç koleksiyonu
    match /rateLimits/{userId} {
      allow read, write: if request.auth.uid == userId;
      
      // Rate limit verilerini sıfırlama
      allow update: if request.auth.uid == userId &&
                   request.resource.data.requests[request.resource.data.path] == 0;
    }

    // Grup kuralları - daha izin verici hale getirildi
    match /groups/{groupId} {
      allow read: if true;  // Herkes okuyabilir
      allow create: if isAuthenticated();  // Giriş yapan herkes oluşturabilir
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.ownerId || 
         request.auth.uid in resource.data.members);
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.ownerId;
      
      // Grup üyeleri koleksiyonu
      match /members/{memberId} {
        allow read: if true;
        allow write: if isAuthenticated();
      }
    }

    // Video kuralları
    match /videos/{videoId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Yorum kuralları
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Beğeni kuralları
    match /likes/{likeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
  }
}
