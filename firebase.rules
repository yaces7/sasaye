rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Kullanıcı doğrulama fonksiyonu
    function isAuthenticated() {
      return request.auth != null;
    }

    // Email doğrulama kontrolü
    function isEmailVerified() {
      return request.auth.token.email_verified;
    }

    // Rate limiting fonksiyonu
    function notSpamming(path) {
      let recentRequests = get(/databases/$(database)/documents/rateLimits/$(request.auth.uid)).data.requests[path];
      return recentRequests == null || recentRequests < 30;
    }

    // Kullanıcı dokümanları
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Kullanıcı ayarları
    match /userSettings/{userId} {
      allow read: if isAuthenticated() 
        && request.auth.uid == userId;
      allow create: if isAuthenticated() 
        && request.auth.uid == userId;
      allow update: if isAuthenticated() 
        && request.auth.uid == userId 
        && notSpamming(5)  // 5 saniye rate limit
        && validateSettings(); // Ayarların doğruluğunu kontrol et
    }

    // Ayarların doğruluğunu kontrol eden fonksiyon
    function validateSettings() {
      let settings = request.resource.data;
      return 
        settings.keys().hasAll(['emailNotifications', 'privateProfile', 'theme', 'language']) &&
        settings.emailNotifications is bool &&
        settings.privateProfile is bool &&
        settings.theme in ['light', 'dark'] &&
        settings.language in ['tr', 'en'];
    }

    // Grup dokümanları
    match /groups/{groupId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.ownerId &&
        notSpamming('groups');
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.ownerId ||
         request.auth.uid in resource.data.members);
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.ownerId;

      // Grup üyeleri alt koleksiyonu
      match /members/{memberId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && 
          (request.auth.uid == get(/databases/$(database)/documents/groups/$(groupId)).data.ownerId ||
           request.auth.uid == memberId);
      }
    }

    // Mesaj dokümanları
    match /messages/{messageId} {
      allow read: if isAuthenticated() 
        && isMessageParticipant(messageId);
      allow create: if isAuthenticated() 
        && isEmailVerified()
        && notSpamming('messages');
      allow delete: if isAuthenticated() 
        && isMessageOwner(messageId)
        && notSpamming('messages');
    }

    // Yorum dokümanları
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
        && isEmailVerified()
        && notSpamming('comments');
      allow delete: if isAuthenticated() 
        && isCommentOwner(commentId)
        && notSpamming('comments');
    }

    // Bildirim dokümanları
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() 
        && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() 
        && notSpamming('notifications');
      allow delete: if isAuthenticated() 
        && request.auth.uid == resource.data.userId;
    }

    // Yardımcı fonksiyonlar
    function isGroupMember(groupId) {
      return request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
    }

    function isGroupOwner(groupId) {
      return request.auth.uid == get(/databases/$(database)/documents/groups/$(groupId)).data.ownerId;
    }

    function isMessageParticipant(messageId) {
      return request.auth.uid in get(/databases/$(database)/documents/messages/$(messageId)).data.participants;
    }

    function isMessageOwner(messageId) {
      return request.auth.uid == get(/databases/$(database)/documents/messages/$(messageId)).data.senderId;
    }

    function isCommentOwner(commentId) {
      return request.auth.uid == get(/databases/$(database)/documents/comments/$(commentId)).data.userId;
    }

    function getUserGroupCount() {
      return getAfter(/databases/$(database)/documents/groups)
        .where('ownerId', '==', request.auth.uid)
        .count();
    }

    // Video koleksiyonu kuralları
    match /videos/{videoId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId &&
        notSpamming('videos');
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views', 'likes']));
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }

    // Sohbet koleksiyonu kuralları
    match /chats/{chatId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() &&
        request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;

      // Mesajlar alt koleksiyonu
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
          request.auth.uid == request.resource.data.senderId &&
          notSpamming('messages');
        allow update: if isAuthenticated() &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
          (!request.resource.data.diff(resource.data).affectedKeys()
            .hasAny(['senderId', 'timestamp', 'text']));
      }
    }

    // Rate limiting için sayaç koleksiyonu
    match /rateLimits/{userId} {
      allow read, write: if request.auth.uid == userId;
      
      // Rate limit verilerini sıfırlama
      allow update: if request.auth.uid == userId &&
                   request.resource.data.requests[request.resource.data.path] == 0;
    }
  }
} 